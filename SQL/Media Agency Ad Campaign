Project: Media Agency Ad Campaign Performance Analysis and Optimization Using SQL

Overview: The goal of this project is to provide an in-depth analysis of advertising campaign performance using SQL. 
          The project leverages a dataset from an advertising platform that includes metrics such as impressions, clicks, conversions, 
          video starts, video completions, and campaign costs. The objective is to analyze the performance of different ad placements, 
          partners, and devices, while also optimizing costs and identifying opportunities for improvement.

The goal of this project is to showcase SQL skills for data analysis and reporting by:

    Importing data.
    Cleaning and preparing the dataset.
    Analyzing happiness factors across different regions.
    Visualizing insights into what drives happiness.
    Generating reports for top happiest countries, regions, and key happiness determinants.


-- SQL Data Project: Comprehensive Analysis of Ad Campaigns

-- 1. Campaign Performance Analysis
-- Aggregate total impressions, clicks, and conversions for each partner and tactic.
SELECT 
    partner, 
    tactic, 
    SUM(impressions) AS total_impressions, 
    SUM(clicks) AS total_clicks, 
    SUM(conversions) AS total_conversions
FROM 
    Ad_Server_Primary
GROUP BY 
    partner, tactic
ORDER BY 
    total_impressions DESC;

-- 2. Cost and Revenue Optimization
-- Calculate the average CPM and CPCV for each partner.
SELECT 
    partner, 
    AVG(CASE WHEN cost_structure = 'CPM' THEN rate END) AS avg_cpm,
    AVG(CASE WHEN cost_structure = 'CPCV' THEN rate END) AS avg_cpcv
FROM 
    Combined_Data
GROUP BY 
    partner
ORDER BY 
    avg_cpm ASC;

-- 3. Click-Through Rate (CTR) and Conversion Rate Analysis
-- Calculate the Click-Through Rate (CTR) and Conversion Rate by placement.
SELECT 
    placement_id, 
    (SUM(clicks) / SUM(impressions)) * 100 AS ctr_percentage,
    (SUM(conversions) / SUM(clicks)) * 100 AS conversion_rate_percentage
FROM 
    Ad_Server_Primary
GROUP BY 
    placement_id
ORDER BY 
    ctr_percentage DESC;

-- 4. Video Ad Performance Analysis
-- Analyze video completion rates by calculating the percentage of videos completed out of videos started.
SELECT 
    placement_id, 
    (SUM(video_completes) / SUM(video_starts)) * 100 AS video_completion_rate
FROM 
    Video_Ad_Server_Secondary
GROUP BY 
    placement_id
ORDER BY 
    video_completion_rate DESC;

-- 5. Ad Placement Effectiveness by Device
-- Analyze ad performance by device type, grouping data to see how different devices affect ad success.
SELECT 
    device_type, 
    SUM(impressions) AS total_impressions, 
    SUM(clicks) AS total_clicks, 
    SUM(conversions) AS total_conversions
FROM 
    Combined_Data
GROUP BY 
    device_type
ORDER BY 
    total_impressions DESC;

-- 6. Performance Comparison Between Partners
-- Compare performance metrics (impressions, clicks, conversions) across partners.
SELECT 
    partner, 
    SUM(impressions) AS total_impressions, 
    SUM(clicks) AS total_clicks, 
    SUM(conversions) AS total_conversions
FROM 
    Combined_Data
GROUP BY 
    partner
ORDER BY 
    total_conversions DESC;

-- 7. ROI (Return on Investment) Calculation
-- Calculate ROI for each partner, comparing the cost of campaigns to the revenue generated from conversions.
WITH TotalCost AS (
    SELECT 
        placement_id, 
        SUM(cost) AS total_cost
    FROM 
        Combined_Data
    GROUP BY 
        placement_id
)
SELECT 
    Combined_Data.partner, 
    (SUM(Combined_Data.conversions) * revenue_per_conversion - TotalCost.total_cost) / TotalCost.total_cost * 100 AS roi_percentage
FROM 
    TotalCost
JOIN 
    Combined_Data ON TotalCost.placement_id = Combined_Data.placement_id
GROUP BY 
    Combined_Data.partner
ORDER BY 
    roi_percentage DESC;

-- 8. Time-Series Analysis of Ad Performance
-- Perform time-series analysis to track daily impressions and clicks over time.
SELECT 
    date, 
    SUM(impressions) AS daily_impressions, 
    SUM(clicks) AS daily_clicks
FROM 
    Ad_Server_Primary
GROUP BY 
    date
ORDER BY 
    date ASC;

-- 9. Anomaly Detection in Ad Metrics
-- Use standard deviation to detect anomalies (unusually high or low impressions) for each partner.
WITH Stats AS (
    SELECT 
        partner, 
        AVG(impressions) AS avg_impressions, 
        STDDEV(impressions) AS stddev_impressions
    FROM 
        Ad_Server_Primary
    GROUP BY 
        partner
)
SELECT 
    Ad_Server_Primary.partner, 
    Ad_Server_Primary.impressions, 
    CASE 
        WHEN Ad_Server_Primary.impressions > (Stats.avg_impressions + 2 * Stats.stddev_impressions) THEN 'High Anomaly'
        WHEN Ad_Server_Primary.impressions < (Stats.avg_impressions - 2 * Stats.stddev_impressions) THEN 'Low Anomaly'
        ELSE 'Normal'
    END AS anomaly_status
FROM 
    Ad_Server_Primary
JOIN 
    Stats ON Ad_Server_Primary.partner = Stats.partner
ORDER BY 
    anomaly_status DESC;

-- 10. Correlation Between Metrics
-- Investigate correlation between impressions, clicks, and conversions by calculating ratios.
SELECT 
    placement_id, 
    SUM(impressions) AS total_impressions, 
    SUM(clicks) AS total_clicks, 
    SUM(conversions) AS total_conversions,
    (SUM(clicks) / NULLIF(SUM(impressions), 0)) AS click_to_impression_ratio,
    (SUM(conversions) / NULLIF(SUM(clicks), 0)) AS conversion_to_click_ratio
FROM 
    Ad_Server_Primary
GROUP BY 
    placement_id
ORDER BY 
    click_to_impression_ratio DESC;


